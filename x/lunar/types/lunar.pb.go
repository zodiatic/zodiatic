// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lunar/lunar.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Lunar struct {
	Yyyymmdd             uint64 `protobuf:"varint,1,opt,name=yyyymmdd,proto3" json:"yyyymmdd,omitempty"`
	Date                 string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Year                 uint64 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	Month                uint64 `protobuf:"varint,4,opt,name=month,proto3" json:"month,omitempty"`
	Day                  uint64 `protobuf:"varint,5,opt,name=day,proto3" json:"day,omitempty"`
	Lunar                string `protobuf:"bytes,6,opt,name=lunar,proto3" json:"lunar,omitempty"`
	EightCharacters      string `protobuf:"bytes,7,opt,name=eightCharacters,proto3" json:"eightCharacters,omitempty"`
	LunarYear            uint64 `protobuf:"varint,8,opt,name=lunarYear,proto3" json:"lunarYear,omitempty"`
	LunarMonth           uint64 `protobuf:"varint,9,opt,name=lunarMonth,proto3" json:"lunarMonth,omitempty"`
	LunarDay             uint64 `protobuf:"varint,10,opt,name=lunarDay,proto3" json:"lunarDay,omitempty"`
	LunarLeapMonth       bool   `protobuf:"varint,11,opt,name=lunarLeapMonth,proto3" json:"lunarLeapMonth,omitempty"`
	SexagenaryYear       string `protobuf:"bytes,12,opt,name=sexagenaryYear,proto3" json:"sexagenaryYear,omitempty"`
	SexagenaryMonth      string `protobuf:"bytes,13,opt,name=sexagenaryMonth,proto3" json:"sexagenaryMonth,omitempty"`
	SexagenaryDay        string `protobuf:"bytes,14,opt,name=sexagenaryDay,proto3" json:"sexagenaryDay,omitempty"`
	Zodiac               string `protobuf:"bytes,15,opt,name=zodiac,proto3" json:"zodiac,omitempty"`
	ZodiacEnglish        string `protobuf:"bytes,16,opt,name=zodiacEnglish,proto3" json:"zodiacEnglish,omitempty"`
	DayOfWeek            uint64 `protobuf:"varint,17,opt,name=dayOfWeek,proto3" json:"dayOfWeek,omitempty"`
	AuspiciousDirections string `protobuf:"bytes,18,opt,name=auspiciousDirections,proto3" json:"auspiciousDirections,omitempty"`
	Auspicious           string `protobuf:"bytes,19,opt,name=auspicious,proto3" json:"auspicious,omitempty"`
	Inauspicious         string `protobuf:"bytes,20,opt,name=inauspicious,proto3" json:"inauspicious,omitempty"`
	AuspiciousTime       string `protobuf:"bytes,21,opt,name=auspiciousTime,proto3" json:"auspiciousTime,omitempty"`
	InauspiciousTime     string `protobuf:"bytes,22,opt,name=inauspiciousTime,proto3" json:"inauspiciousTime,omitempty"`
	Version              uint64 `protobuf:"varint,23,opt,name=version,proto3" json:"version,omitempty"`
	Remarks              string `protobuf:"bytes,24,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (m *Lunar) Reset()         { *m = Lunar{} }
func (m *Lunar) String() string { return proto.CompactTextString(m) }
func (*Lunar) ProtoMessage()    {}
func (*Lunar) Descriptor() ([]byte, []int) {
	return fileDescriptor_73231580c738c437, []int{0}
}
func (m *Lunar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lunar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lunar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lunar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lunar.Merge(m, src)
}
func (m *Lunar) XXX_Size() int {
	return m.Size()
}
func (m *Lunar) XXX_DiscardUnknown() {
	xxx_messageInfo_Lunar.DiscardUnknown(m)
}

var xxx_messageInfo_Lunar proto.InternalMessageInfo

func (m *Lunar) GetYyyymmdd() uint64 {
	if m != nil {
		return m.Yyyymmdd
	}
	return 0
}

func (m *Lunar) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Lunar) GetYear() uint64 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Lunar) GetMonth() uint64 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *Lunar) GetDay() uint64 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *Lunar) GetLunar() string {
	if m != nil {
		return m.Lunar
	}
	return ""
}

func (m *Lunar) GetEightCharacters() string {
	if m != nil {
		return m.EightCharacters
	}
	return ""
}

func (m *Lunar) GetLunarYear() uint64 {
	if m != nil {
		return m.LunarYear
	}
	return 0
}

func (m *Lunar) GetLunarMonth() uint64 {
	if m != nil {
		return m.LunarMonth
	}
	return 0
}

func (m *Lunar) GetLunarDay() uint64 {
	if m != nil {
		return m.LunarDay
	}
	return 0
}

func (m *Lunar) GetLunarLeapMonth() bool {
	if m != nil {
		return m.LunarLeapMonth
	}
	return false
}

func (m *Lunar) GetSexagenaryYear() string {
	if m != nil {
		return m.SexagenaryYear
	}
	return ""
}

func (m *Lunar) GetSexagenaryMonth() string {
	if m != nil {
		return m.SexagenaryMonth
	}
	return ""
}

func (m *Lunar) GetSexagenaryDay() string {
	if m != nil {
		return m.SexagenaryDay
	}
	return ""
}

func (m *Lunar) GetZodiac() string {
	if m != nil {
		return m.Zodiac
	}
	return ""
}

func (m *Lunar) GetZodiacEnglish() string {
	if m != nil {
		return m.ZodiacEnglish
	}
	return ""
}

func (m *Lunar) GetDayOfWeek() uint64 {
	if m != nil {
		return m.DayOfWeek
	}
	return 0
}

func (m *Lunar) GetAuspiciousDirections() string {
	if m != nil {
		return m.AuspiciousDirections
	}
	return ""
}

func (m *Lunar) GetAuspicious() string {
	if m != nil {
		return m.Auspicious
	}
	return ""
}

func (m *Lunar) GetInauspicious() string {
	if m != nil {
		return m.Inauspicious
	}
	return ""
}

func (m *Lunar) GetAuspiciousTime() string {
	if m != nil {
		return m.AuspiciousTime
	}
	return ""
}

func (m *Lunar) GetInauspiciousTime() string {
	if m != nil {
		return m.InauspiciousTime
	}
	return ""
}

func (m *Lunar) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Lunar) GetRemarks() string {
	if m != nil {
		return m.Remarks
	}
	return ""
}

func init() {
	proto.RegisterType((*Lunar)(nil), "zodiatic.zodiatic.lunar.Lunar")
}

func init() { proto.RegisterFile("lunar/lunar.proto", fileDescriptor_73231580c738c437) }

var fileDescriptor_73231580c738c437 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0x8e, 0x12, 0x41,
	0x10, 0xc6, 0x19, 0x17, 0x58, 0x28, 0xf7, 0x0f, 0x5b, 0xe2, 0x6e, 0xc5, 0x98, 0x09, 0xd9, 0x18,
	0x43, 0xf6, 0x00, 0x89, 0xbe, 0x81, 0xe2, 0x6d, 0x8d, 0x09, 0x31, 0x31, 0x7a, 0xeb, 0x9d, 0x69,
	0x99, 0xce, 0xee, 0xcc, 0x90, 0xee, 0xc6, 0x6c, 0xfb, 0x06, 0xde, 0x7c, 0x2c, 0x8f, 0x1c, 0x3d,
	0x1a, 0x78, 0x11, 0xd3, 0xd5, 0xc2, 0xc0, 0xb8, 0x17, 0x52, 0xdf, 0xaf, 0xbe, 0x2a, 0xaa, 0x6a,
	0xd2, 0x70, 0x76, 0xb7, 0x28, 0x84, 0x1e, 0xf3, 0xef, 0x68, 0xae, 0x4b, 0x5b, 0xe2, 0xc5, 0xf7,
	0x32, 0x55, 0xc2, 0xaa, 0x64, 0xb4, 0x0d, 0x38, 0x7d, 0xf9, 0xa3, 0x0d, 0xad, 0x6b, 0x1f, 0xe1,
	0x33, 0xe8, 0x38, 0xe7, 0x5c, 0x9e, 0xa7, 0x29, 0x45, 0x83, 0x68, 0xd8, 0x9c, 0x6e, 0x35, 0x22,
	0x34, 0x53, 0x61, 0x25, 0x3d, 0x1a, 0x44, 0xc3, 0xee, 0x94, 0x63, 0xcf, 0x9c, 0x14, 0x9a, 0x0e,
	0xd8, 0xcb, 0x31, 0xf6, 0xa1, 0x95, 0x97, 0x85, 0xcd, 0xa8, 0xc9, 0x30, 0x08, 0xec, 0xc1, 0x41,
	0x2a, 0x1c, 0xb5, 0x98, 0xf9, 0xd0, 0xfb, 0xf8, 0xef, 0xa9, 0xcd, 0x0d, 0x83, 0xc0, 0x21, 0x9c,
	0x4a, 0x35, 0xcb, 0xec, 0xdb, 0x4c, 0x68, 0x91, 0x58, 0xa9, 0x0d, 0x1d, 0x72, 0xbe, 0x8e, 0xf1,
	0x39, 0x74, 0xb9, 0xe4, 0xb3, 0x1f, 0xa0, 0xc3, 0x7d, 0x2b, 0x80, 0x31, 0x00, 0x8b, 0xf7, 0x3c,
	0x4a, 0x97, 0xd3, 0x3b, 0xc4, 0x6f, 0xca, 0x6a, 0x22, 0x1c, 0x41, 0xd8, 0x74, 0xa3, 0xf1, 0x25,
	0x9c, 0x70, 0x7c, 0x2d, 0xc5, 0x3c, 0xd4, 0x3f, 0x1e, 0x44, 0xc3, 0xce, 0xb4, 0x46, 0xbd, 0xcf,
	0xc8, 0x7b, 0x31, 0x93, 0x85, 0xd0, 0x8e, 0xc7, 0x38, 0xe2, 0x51, 0x6b, 0xd4, 0xef, 0x54, 0x91,
	0xd0, 0xf0, 0x38, 0xec, 0x54, 0xc3, 0xf8, 0x02, 0x8e, 0x2b, 0xe4, 0x47, 0x3b, 0x61, 0xdf, 0x3e,
	0xc4, 0x73, 0x68, 0xf3, 0x17, 0x4c, 0xe8, 0x94, 0xd3, 0xff, 0x94, 0xaf, 0x0e, 0xd1, 0xbb, 0x62,
	0x76, 0xa7, 0x4c, 0x46, 0xbd, 0x50, 0xbd, 0x07, 0xfd, 0xdd, 0x52, 0xe1, 0x3e, 0x7c, 0xfd, 0x24,
	0xe5, 0x2d, 0x9d, 0x85, 0xbb, 0x6d, 0x01, 0xbe, 0x82, 0xbe, 0x58, 0x98, 0xb9, 0x4a, 0x54, 0xb9,
	0x30, 0x13, 0xa5, 0x65, 0x62, 0x55, 0x59, 0x18, 0x42, 0x6e, 0xf5, 0x60, 0xce, 0xdf, 0xba, 0xe2,
	0xf4, 0x84, 0x9d, 0x3b, 0x04, 0x2f, 0xe1, 0x48, 0x15, 0x3b, 0x8e, 0x3e, 0x3b, 0xf6, 0x98, 0xbf,
	0x65, 0xa5, 0x3e, 0xaa, 0x5c, 0xd2, 0xd3, 0x70, 0xcb, 0x7d, 0x8a, 0x57, 0xd0, 0xdb, 0xad, 0x63,
	0xe7, 0x39, 0x3b, 0xff, 0xe3, 0x48, 0x70, 0xf8, 0x4d, 0x6a, 0xa3, 0xca, 0x82, 0x2e, 0x78, 0xcf,
	0x8d, 0xf4, 0x19, 0x2d, 0x73, 0xa1, 0x6f, 0x0d, 0x11, 0x17, 0x6f, 0xe4, 0x9b, 0xc9, 0xaf, 0x55,
	0x1c, 0x2d, 0x57, 0x71, 0xf4, 0x67, 0x15, 0x47, 0x3f, 0xd7, 0x71, 0x63, 0xb9, 0x8e, 0x1b, 0xbf,
	0xd7, 0x71, 0xe3, 0xcb, 0xd5, 0x4c, 0xd9, 0x6c, 0x71, 0x33, 0x4a, 0xca, 0x7c, 0xbc, 0x79, 0x40,
	0x55, 0x70, 0x1f, 0x9e, 0xda, 0xd8, 0xba, 0xb9, 0x34, 0x37, 0x6d, 0x7e, 0x71, 0xaf, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xbd, 0x2c, 0x90, 0xfb, 0x86, 0x03, 0x00, 0x00,
}

func (m *Lunar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lunar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lunar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Remarks) > 0 {
		i -= len(m.Remarks)
		copy(dAtA[i:], m.Remarks)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.Remarks)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Version != 0 {
		i = encodeVarintLunar(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.InauspiciousTime) > 0 {
		i -= len(m.InauspiciousTime)
		copy(dAtA[i:], m.InauspiciousTime)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.InauspiciousTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.AuspiciousTime) > 0 {
		i -= len(m.AuspiciousTime)
		copy(dAtA[i:], m.AuspiciousTime)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.AuspiciousTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Inauspicious) > 0 {
		i -= len(m.Inauspicious)
		copy(dAtA[i:], m.Inauspicious)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.Inauspicious)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Auspicious) > 0 {
		i -= len(m.Auspicious)
		copy(dAtA[i:], m.Auspicious)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.Auspicious)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.AuspiciousDirections) > 0 {
		i -= len(m.AuspiciousDirections)
		copy(dAtA[i:], m.AuspiciousDirections)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.AuspiciousDirections)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.DayOfWeek != 0 {
		i = encodeVarintLunar(dAtA, i, uint64(m.DayOfWeek))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.ZodiacEnglish) > 0 {
		i -= len(m.ZodiacEnglish)
		copy(dAtA[i:], m.ZodiacEnglish)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.ZodiacEnglish)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Zodiac) > 0 {
		i -= len(m.Zodiac)
		copy(dAtA[i:], m.Zodiac)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.Zodiac)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SexagenaryDay) > 0 {
		i -= len(m.SexagenaryDay)
		copy(dAtA[i:], m.SexagenaryDay)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.SexagenaryDay)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.SexagenaryMonth) > 0 {
		i -= len(m.SexagenaryMonth)
		copy(dAtA[i:], m.SexagenaryMonth)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.SexagenaryMonth)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SexagenaryYear) > 0 {
		i -= len(m.SexagenaryYear)
		copy(dAtA[i:], m.SexagenaryYear)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.SexagenaryYear)))
		i--
		dAtA[i] = 0x62
	}
	if m.LunarLeapMonth {
		i--
		if m.LunarLeapMonth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.LunarDay != 0 {
		i = encodeVarintLunar(dAtA, i, uint64(m.LunarDay))
		i--
		dAtA[i] = 0x50
	}
	if m.LunarMonth != 0 {
		i = encodeVarintLunar(dAtA, i, uint64(m.LunarMonth))
		i--
		dAtA[i] = 0x48
	}
	if m.LunarYear != 0 {
		i = encodeVarintLunar(dAtA, i, uint64(m.LunarYear))
		i--
		dAtA[i] = 0x40
	}
	if len(m.EightCharacters) > 0 {
		i -= len(m.EightCharacters)
		copy(dAtA[i:], m.EightCharacters)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.EightCharacters)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Lunar) > 0 {
		i -= len(m.Lunar)
		copy(dAtA[i:], m.Lunar)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.Lunar)))
		i--
		dAtA[i] = 0x32
	}
	if m.Day != 0 {
		i = encodeVarintLunar(dAtA, i, uint64(m.Day))
		i--
		dAtA[i] = 0x28
	}
	if m.Month != 0 {
		i = encodeVarintLunar(dAtA, i, uint64(m.Month))
		i--
		dAtA[i] = 0x20
	}
	if m.Year != 0 {
		i = encodeVarintLunar(dAtA, i, uint64(m.Year))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintLunar(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0x12
	}
	if m.Yyyymmdd != 0 {
		i = encodeVarintLunar(dAtA, i, uint64(m.Yyyymmdd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLunar(dAtA []byte, offset int, v uint64) int {
	offset -= sovLunar(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Lunar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Yyyymmdd != 0 {
		n += 1 + sovLunar(uint64(m.Yyyymmdd))
	}
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	if m.Year != 0 {
		n += 1 + sovLunar(uint64(m.Year))
	}
	if m.Month != 0 {
		n += 1 + sovLunar(uint64(m.Month))
	}
	if m.Day != 0 {
		n += 1 + sovLunar(uint64(m.Day))
	}
	l = len(m.Lunar)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	l = len(m.EightCharacters)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	if m.LunarYear != 0 {
		n += 1 + sovLunar(uint64(m.LunarYear))
	}
	if m.LunarMonth != 0 {
		n += 1 + sovLunar(uint64(m.LunarMonth))
	}
	if m.LunarDay != 0 {
		n += 1 + sovLunar(uint64(m.LunarDay))
	}
	if m.LunarLeapMonth {
		n += 2
	}
	l = len(m.SexagenaryYear)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	l = len(m.SexagenaryMonth)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	l = len(m.SexagenaryDay)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	l = len(m.Zodiac)
	if l > 0 {
		n += 1 + l + sovLunar(uint64(l))
	}
	l = len(m.ZodiacEnglish)
	if l > 0 {
		n += 2 + l + sovLunar(uint64(l))
	}
	if m.DayOfWeek != 0 {
		n += 2 + sovLunar(uint64(m.DayOfWeek))
	}
	l = len(m.AuspiciousDirections)
	if l > 0 {
		n += 2 + l + sovLunar(uint64(l))
	}
	l = len(m.Auspicious)
	if l > 0 {
		n += 2 + l + sovLunar(uint64(l))
	}
	l = len(m.Inauspicious)
	if l > 0 {
		n += 2 + l + sovLunar(uint64(l))
	}
	l = len(m.AuspiciousTime)
	if l > 0 {
		n += 2 + l + sovLunar(uint64(l))
	}
	l = len(m.InauspiciousTime)
	if l > 0 {
		n += 2 + l + sovLunar(uint64(l))
	}
	if m.Version != 0 {
		n += 2 + sovLunar(uint64(m.Version))
	}
	l = len(m.Remarks)
	if l > 0 {
		n += 2 + l + sovLunar(uint64(l))
	}
	return n
}

func sovLunar(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLunar(x uint64) (n int) {
	return sovLunar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Lunar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLunar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lunar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lunar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yyyymmdd", wireType)
			}
			m.Yyyymmdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Yyyymmdd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lunar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lunar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EightCharacters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EightCharacters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LunarYear", wireType)
			}
			m.LunarYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LunarYear |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LunarMonth", wireType)
			}
			m.LunarMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LunarMonth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LunarDay", wireType)
			}
			m.LunarDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LunarDay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LunarLeapMonth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LunarLeapMonth = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SexagenaryYear", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SexagenaryYear = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SexagenaryMonth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SexagenaryMonth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SexagenaryDay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SexagenaryDay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zodiac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zodiac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZodiacEnglish", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZodiacEnglish = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayOfWeek", wireType)
			}
			m.DayOfWeek = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayOfWeek |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuspiciousDirections", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuspiciousDirections = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auspicious", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auspicious = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inauspicious", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inauspicious = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuspiciousTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuspiciousTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InauspiciousTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InauspiciousTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLunar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLunar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remarks = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLunar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLunar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLunar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLunar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLunar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLunar
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLunar
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLunar
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLunar        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLunar          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLunar = fmt.Errorf("proto: unexpected end of group")
)
